name: Release Action
on:
  workflow_dispatch:
    inputs:
      release-type:
        description: "Release type (one of): patch, minor, major, prepatch, preminor, premajor, prerelease"
        required: true
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - uses: actions/checkout@v3
        with:
          clean: true
          ref: dev # Checkout the dev branch initially
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Git configuration
        run: |
          git config --global user.email "902348742+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions"
      - name: Install Packages
        run: npm install
      # Step 1: Put the state from dev to main
      - name: Checkout main branch and reset to dev
        run: |
          git fetch --all
          git checkout dev
          git branch -D main || true
          git checkout -b main
          git push --force origin main

      # Step 2: Make a npm version command to update package.json and create tags
      - name: Change release version and create tag
        run: npm version ${{ env.RELEASE_TYPE }}
        env:
          RELEASE_TYPE: ${{ github.event.inputs.release-type }}

      - name: Push changes to main branch with tags
        run: |
          git push origin main
          git push origin --tags

      # Step 3: Put that change back to dev
      - name: Checkout dev branch and update with new version
        run: |
          git checkout dev
          git reset --hard main  # Reset dev to match main
          git push origin dev
      # Additional steps for deployment and build process
      # copied from gh-pages
      - name: prepare 0
        run: touch .version && touch .githash && yarn run postversion
      - name: prepare 1 (version stuff)
        run: VERSION=`cat .version`; sed -i "s/%LIB_VERSION%/$VERSION/" src/version.js
      - name: prepare 2 (hash stuff)
        run: HASH=`cat .githash`; sed -i "s/%LIB_HASH%/$HASH/" src/version.js
      - name: prepare 3 (gitdescribe stuff)
        run: DESCRIBE=`cat .gitdescribe`; sed -i "s/%LIB_DESCRIBE%/$DESCRIBE/" src/version.js
      - name: Build Storybook
        run: npm run build-storybook
        env:
          CI: false
      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./storybook-static
      - name: show deployed folder
        run: ls storybook-static
